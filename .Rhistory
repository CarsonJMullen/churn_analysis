train = data.frame(lstat,medv)
test = data.frame(lstat,medv)
tr = sample(1:506,400)
train = train[tr,]
test = test[-tr,]
out_MSE = NULL
for(i in 2:350){
near = kknn(medv~lstat,train,test,k=i,kernel = "rectangular")
aux = mean((test[,2]-near$fitted)^2)
out_MSE = c(out_MSE,aux)
}
best = which.min(out_MSE)
plot(log(1/(2:350)),sqrt(out_MSE),xlab="Complexity (log(1/k))",ylab="out-of-sample RMSE",col=4,lwd=2,type="l",cex.lab=1.2)
text(log(1/best),sqrt(out_MSE[best])+0.3,paste("k=",best),col=2,cex=1.2)
text(log(1/2),sqrt(out_MSE[2]),paste("k=",2),col=2,cex=1.2)
text(log(1/354)+0.4,sqrt(out_MSE[345]),paste("k=",345),col=2,cex=1.2)
near = kknn(medv~lstat,train,test,k=42,kernel = "rectangular")
ind = order(test[,1])
plot(lstat,medv,main=paste("k=",42),pch=19,cex=0.8,col="darkgray")
lines(test[ind,1],near$fitted[ind],col=2,lwd=2)
train = data.frame(lstat,medv)
test = data.frame(lstat,medv)
out_MSE = matrix(0,n,100)
for(j in 1:n){
train_i = train[-j,]
test_i = test[j,]
for(i in 1:100){
near = kknn(medv~lstat,train_i,test_i,k=i,kernel = "rectangular")
aux = mean((test_i[,2]-near$fitted)^2)
out_MSE[j,i] = aux
}
cat(j,'\n')
}
library(MASS) ## a library of example datasets
library(class) ## a library with lots of classification tools
library(kknn) ## knn library
attach(Boston)
n = dim(Boston)[1]
plot(lstat,medv)
train = data.frame(lstat,medv)
test = data.frame(lstat,medv)
ind = order(test[,1])
test =test[ind,]
MSE = NULL
kk = c(2,10,50,100,150,200,250,300,400,505)
for(i in kk){
near = kknn(medv~lstat,train,test,k=i,kernel = "rectangular")
aux = mean((test[,2]-near$fitted)^2)
MSE = c(MSE,aux)
plot(lstat,medv,main=paste("k=",i),pch=19,cex=0.8,col="darkgray")
lines(test[,1],near$fitted,col=2,lwd=2)
cat ("Press [enter] to continue")
line <- readline()
}
ii = near$C[i,1:20]
plot(lstat,medv,main=paste("k=",20),pch=19,cex=0.8,col="darkgray")
lines(test[,1],near$fitted,col=2,lwd=2)
abline(v=test[i,1],col=2,lty=2)
points(lstat[ii],medv[ii],pch=19,col="blue")
cat ("Press [enter] to continue")
line <- readline()
######################################
## OUT-OF-SAMPLE Prediction
######################################
train = data.frame(lstat,medv)
test = data.frame(lstat,medv)
tr = sample(1:506,400)
train = train[tr,]
test = test[-tr,]
out_MSE = NULL
for(i in 2:350){
near = kknn(medv~lstat,train,test,k=i,kernel = "rectangular")
aux = mean((test[,2]-near$fitted)^2)
out_MSE = c(out_MSE,aux)
}
best = which.min(out_MSE)
plot(log(1/(2:350)),sqrt(out_MSE),xlab="Complexity (log(1/k))",ylab="out-of-sample RMSE",col=4,lwd=2,type="l",cex.lab=1.2)
text(log(1/best),sqrt(out_MSE[best])+0.3,paste("k=",best),col=2,cex=1.2)
text(log(1/2),sqrt(out_MSE[2]),paste("k=",2),col=2,cex=1.2)
text(log(1/354)+0.4,sqrt(out_MSE[345]),paste("k=",345),col=2,cex=1.2)
near = kknn(medv~lstat,train,test,k=42,kernel = "rectangular")
ind = order(test[,1])
plot(lstat,medv,main=paste("k=",42),pch=19,cex=0.8,col="darkgray")
lines(test[ind,1],near$fitted[ind],col=2,lwd=2)
#########################################
# leave-one-out cross validation (LOOCV)#
#########################################
train = data.frame(lstat,medv)
test = data.frame(lstat,medv)
out_MSE = matrix(0,n,100)
for(j in 1:n){
train_i = train[-j,]
test_i = test[j,]
for(i in 1:100){
near = kknn(medv~lstat,train_i,test_i,k=i,kernel = "rectangular")
aux = mean((test_i[,2]-near$fitted)^2)
out_MSE[j,i] = aux
}
cat(j,'\n')
}
mMSE = apply(out_MSE,2,mean)
plot(log(1/(1:100)),sqrt(mMSE),xlab="Complexity (log(1/k))",ylab="out-of-sample RMSE",col=4,lwd=2,type="l",cex.lab=1.2)
best = which.min(mMSE)
text(log(1/best),sqrt(mMSE[best])+0.1,paste("k=",best),col=2,cex=1.2)
text(log(1/2),sqrt(mMSE[2])+0.3,paste("k=",2),col=2,cex=1.2)
text(log(1/100)+0.4,sqrt(mMSE[100]),paste("k=",100),col=2,cex=1.2)
#################################
# k-fold cross validation       #
#################################
kcv = 10
n0 = round(n/kcv,0)
out_MSE = matrix(0,kcv,100)
used = NULL
set = 1:n
for(j in 1:kcv){
if(n0<length(set)){val = sample(set,n0)}
if(n0>=length(set)){val=set}
train_i = train[-val,]
test_i = test[val,]
for(i in 1:100){
near = kknn(medv~lstat,train_i,test_i,k=i,kernel = "rectangular")
aux = mean((test_i[,2]-near$fitted)^2)
out_MSE[j,i] = aux
}
used = union(used,val)
set = (1:n)[-used]
cat(j,'\n')
}
mMSE = apply(out_MSE,2,mean)
plot(log(1/(1:100)),sqrt(mMSE),xlab="Complexity (log(1/k))",ylab="out-of-sample RMSE",col=4,lwd=2,type="l",cex.lab=1.2,main=paste("kfold(",kcv,")"))
best = which.min(mMSE)
text(log(1/best),sqrt(mMSE[best])+0.1,paste("k=",best),col=2,cex=1.2)
text(log(1/2),sqrt(mMSE[2])+0.3,paste("k=",2),col=2,cex=1.2)
text(log(1/100)+0.4,sqrt(mMSE[100]),paste("k=",100),col=2,cex=1.2)
##########################
#### California knn      #
##########################
library(maps)
ca <- read.csv("CAhousing.csv")
Income = scale(CAdata$medianIncome)*sd(CAdata$latitude)
ca <- read.csv("CAhousing.csv")
ca <- read.csv("CAhousing.csv")
CAhousing <- read.csv("~/Downloads/CAhousing.csv")
View(CAhousing)
logMedVal <- log(ca$medianHouseValue)
n=dim(ca)[1]
ca <- read.csv("CAhousing.csv")
ca <- CAhousing
logMedVal <- log(ca$medianHouseValue)
n=dim(ca)[1]
ind = sample(1:n,1000)
Y = logMedVal[ind]
CAdata = ca[ind,]
train = data.frame(Y,CAdata$latitude,CAdata$longitude)
test = data.frame(Y,CAdata$latitude,CAdata$longitude)
near = kknn(Y~.,train,test,k=10,kernel = "rectangular")
res = Y - near$fitted
nclr = 10
plotclr = colorRampPalette(c("cyan","magenta"))(nclr)
predcol = heat.colors(9)[9:1] ## see help(heat.colors)
predbreaks = seq(min(Y),max(Y),length=nclr)
residbreaks = seq(min(res),max(res),length=nclr) # borders of resid color bins
residmap <- function(e){
return(plotclr[cut(drop(e), residbreaks)]) ## cut sorts into bins
}
predmap <- function(y){
return(predcol[cut(drop(y),predbreaks)]) ## cut sorts into bins
}
par(mfrow=c(1,2))
## preds
map('state', 'california')
mtext("fitted values (k=10)",cex=2)
points(test[,3:2], col=predmap(near$fitted), pch=19, cex=1)
map('state', 'california')
mtext("Residuals (k=10)",cex=2)
points(test[,3:2], col=residmap(res), pch=19, cex=1)
n = dim(CAdata)[1]
kcv = 10
n0 = round(n/kcv,0)
out_MSE = matrix(0,kcv,100)
used = NULL
set = 1:n
for(j in 1:kcv){
if(n0<length(set)){val = sample(set,n0)}
if(n0>=length(set)){val=set}
train_i = train[-val,]
test_i = test[val,]
for(i in 1:100){
near = kknn(Y~.,train_i,test_i,k=i,kernel = "rectangular")
aux = mean((test_i[,1]-near$fitted)^2)
out_MSE[j,i] = aux
}
used = union(used,val)
set = (1:n)[-used]
cat(j,'\n')
}
mMSE = apply(out_MSE,2,mean)
par(mfrow=c(1,1))
plot(log(1/(1:100)),sqrt(mMSE),type="l",ylab="out-of-sample RMSE",col=4,lwd=2,main="California Housing (knn)",xlab="Complexity")
best = which.min(mMSE)
text(log(1/best),sqrt(mMSE[best])+0.01,paste("k=",best))
text(log(1/100)+0.4,sqrt(mMSE[100]),"k=100")
text(log(1/1),sqrt(mMSE[1])+0.001,"k=1")
Income = scale(CAdata$medianIncome)*sd(CAdata$latitude)
train = data.frame(Y,CAdata$latitude,CAdata$longitude,Income)
test = data.frame(Y,CAdata$latitude,CAdata$longitude,Income)
near = kknn(Y~.,train,test,k=best,kernel = "rectangular")
res = Y - near$fitted
nclr = 10
plotclr = colorRampPalette(c("cyan","magenta"))(nclr)
predcol = heat.colors(9)[9:1] ## see help(heat.colors)
predbreaks = seq(min(Y),max(Y),length=nclr)
residbreaks = seq(min(res),max(res),length=nclr) # borders of resid color bins
residmap <- function(e){
return(plotclr[cut(drop(e), residbreaks)]) ## cut sorts into bins
}
predmap <- function(y){
return(predcol[cut(drop(y),predbreaks)]) ## cut sorts into bins
}
par(mfrow=c(1,2))
## preds
map('state', 'california')
mtext("fitted values (k=9)",cex=2)
points(test[,3:2], col=predmap(near$fitted), pch=19, cex=1)
map('state', 'california')
mtext("Residuals (k=9)",cex=2)
points(test[,3:2], col=residmap(res), pch=19, cex=1)
library(tree)
library(MASS)
data(Boston)
attach(Boston)
WA_Fn.UseC_.Telco.Customer.Churn <- read.csv("~/Downloads/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(WA_Fn.UseC_.Telco.Customer.Churn)
View(WA_Fn.UseC_.Telco.Customer.Churn)
View(WA_Fn.UseC_.Telco.Customer.Churn)
library(tidyverse)
library(dplyr)
library(caret)
df <- WA_Fn.UseC_.Telco.Customer.Churn
# Create a function to convert "Yes" to 1 and "No" to 0
convert_to_binary <- function(column){
ifelse(column == "Yes", as.numeric(1), as.numeric(0))
}
df$Partner <- convert_to_binary(df$Partner)
df$Dependents <- convert_to_binary(df$Dependents)
df$PhoneService <- convert_to_binary(df$PhoneService)
df$OnlineSecurity <- convert_to_binary(df$OnlineSecurity)
df$OnlineBackup <- convert_to_binary(df$OnlineBackup)
df$DeviceProtection <- convert_to_binary(df$DeviceProtection)
df$TechSupport <- convert_to_binary(df$TechSupport)
df$StreamingTV <- convert_to_binary(df$StreamingTV)
df$StreamingMovies <- convert_to_binary(df$StreamingMovies)
df$PaperlessBilling <- convert_to_binary(df$PaperlessBilling)
df$MultipleLines <- convert_to_binary(df$MultipleLines)
df$Churn <- convert_to_binary(df$Churn)
df$gender = ifelse(df$gender == "Female", 1, 0)
df$InternetService <- as.factor(df$InternetService)
df$Contract <- as.factor(df$Contract)
df$PaymentMethod <- as.factor(df$PaymentMethod)
add_dummys <- df[, c("InternetService", "Contract", "PaymentMethod")]
dummy_data <- dummyVars(~ ., data = add_dummys)
df_with_dummies <- data.frame(predict(dummy_data, newdata = add_dummys))
df_without_dummies <- df %>%
select(-any_of(names(add_dummys)))
full_df <- cbind(df_without_dummies, df_with_dummies)
View(full_df)
model1 <- glm(Churn ~ . - customerID, data = full_df, family = binomial)
summary(model1)
backward_model <- step(model1, direction = "backward")
null_model <- glm(Churn ~ 1, data = full_df, family = binomial)
final_model_forward <- step(null_model, scope = formula(~ .), direction = "forward")
final_model_forward <- step(null_model, scope = formula(~ .), direction = "forward")
final_model_forward <- step(null_model, direction = "forward")
final_model_forward <- step(null_model, direction = "forward")
forward_model <- step(null_model, scope = model1, direction = "forward")
summary(backward_model)
# Replace 'your_model' with the appropriate model function (e.g., glm, randomForest, etc.)
predictors <- full_df %>%
select(-c(Churn, customerID))
View(predictors)
predictors <- full_df %>%
select(-c(Churn, customerID))
response <- full_df$Churn
ctrl <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
model <- train(predictors, response, method = model1, trControl = ctrl)
library(tidyverse)
library(dplyr)
library(caret)
df <- WA_Fn.UseC_.Telco.Customer.Churn
# Create a function to convert "Yes" to 1 and "No" to 0
convert_to_binary <- function(column){
ifelse(column == "Yes", as.numeric(1), as.numeric(0))
}
df$Partner <- convert_to_binary(df$Partner)
df$Dependents <- convert_to_binary(df$Dependents)
df$PhoneService <- convert_to_binary(df$PhoneService)
df$OnlineSecurity <- convert_to_binary(df$OnlineSecurity)
df$OnlineBackup <- convert_to_binary(df$OnlineBackup)
df$DeviceProtection <- convert_to_binary(df$DeviceProtection)
df$TechSupport <- convert_to_binary(df$TechSupport)
df$StreamingTV <- convert_to_binary(df$StreamingTV)
df$StreamingMovies <- convert_to_binary(df$StreamingMovies)
df$PaperlessBilling <- convert_to_binary(df$PaperlessBilling)
df$MultipleLines <- convert_to_binary(df$MultipleLines)
df$Churn <- convert_to_binary(df$Churn)
df$gender = ifelse(df$gender == "Female", 1, 0)
df$InternetService <- as.factor(df$InternetService)
df$Contract <- as.factor(df$Contract)
df$PaymentMethod <- as.factor(df$PaymentMethod)
add_dummys <- df[, c("InternetService", "Contract", "PaymentMethod")]
dummy_data <- dummyVars(~ ., data = add_dummys)
df_with_dummies <- data.frame(predict(dummy_data, newdata = add_dummys))
df_without_dummies <- df %>%
select(-any_of(names(add_dummys)))
full_df <- cbind(df_without_dummies, df_with_dummies)
model1 <- glm(Churn ~ . - customerID, data = full_df, family = binomial)
backward_model <- step(model1, direction = "backward")
null_model <- glm(Churn ~ 1, data = full_df, family = binomial)
forward_model <- step(null_model, direction = "forward")
# Cross Validate
predictors <- full_df %>%
select(-c(Churn, customerID))
response <- full_df$Churn
ctrl <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
model <- train(predictors, response, method = model1, trControl = ctrl)
# Assuming you have a data frame 'full_df' with predictor variables (excluding Churn and customerID) and a response variable 'Churn'.
predictors <- full_df %>% select(-c(Churn, customerID))
response <- full_df$Churn
# Create the trainControl object for 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
# Fit the logistic regression model using cross-validation
model <- train(predictors, response, method = "glm", trControl = ctrl)
# Access the cross-validation results
print(summary(model))
conf_matrix <- confusionMatrix(predict(model, predictors), response)
# Access the cross-validation results
print(summary(model))
conf_matrix <- confusionMatrix(predict(model, predictors), response)
View(df_without_dummies)
cor(df_without_dummies)
df_without_dummies %>%
select(-customerID)
df_without_dummies <- df_without_dummies %>%
select(-customerID)
cor(df_without_dummies)
conf_matrix <- confusionMatrix(predict(model, predictors), response)
conf_matrix <- confusionMatrix(predict(model1, predictors), response)
conf_matrix <- confusionMatrix(predict(model, predictors), response)
set.seed(123)  # For reproducibility
train_index <- createDataPartition(response, p = 0.75, list = FALSE)
train_data <- predictors[train_index, ]
test_data <- predictors[-train_index, ]
train_response <- response[train_index]
test_response <- response[-train_index]
# Fit the logistic regression model using cross-validation on the training data
model <- train(train_data, train_response, method = "glm", trControl = ctrl)
# Access the cross-validation results
print(summary(model))
# Evaluate the model on the testing data
conf_matrix <- confusionMatrix(predict(model, test_data), test_response)
cor(df_without_dummies)
model1 <- glm(Churn ~ . - customerID - MonthlyCharges, data = full_df, family = binomial)
backward_model <- step(model1, direction = "backward")
backward_model <- step(model1, direction = "backward")
predict(full_df, model = model1)
predict(model1, newdata = full_df)
predict(model1, newdata = full_df %>% select(-c(customerID, MonthlyCharges))
)
predict(model1, newdata = full_df %>% select(-c(customerID, MonthlyCharges)))
df <- WA_Fn.UseC_.Telco.Customer.Churn
# Create a function to convert "Yes" to 1 and "No" to 0
convert_to_binary <- function(column){
ifelse(column == "Yes", as.factor(1), as.factor(0))
}
df$Partner <- convert_to_binary(df$Partner)
df$Dependents <- convert_to_binary(df$Dependents)
df$PhoneService <- convert_to_binary(df$PhoneService)
df$OnlineSecurity <- convert_to_binary(df$OnlineSecurity)
df$OnlineBackup <- convert_to_binary(df$OnlineBackup)
df$DeviceProtection <- convert_to_binary(df$DeviceProtection)
df$TechSupport <- convert_to_binary(df$TechSupport)
df$StreamingTV <- convert_to_binary(df$StreamingTV)
df$StreamingMovies <- convert_to_binary(df$StreamingMovies)
df$PaperlessBilling <- convert_to_binary(df$PaperlessBilling)
df$MultipleLines <- convert_to_binary(df$MultipleLines)
df$Churn <- convert_to_binary(df$Churn)
df$gender = ifelse(df$gender == "Female", 1, 0)
df$InternetService <- as.factor(df$InternetService)
df$Contract <- as.factor(df$Contract)
df$PaymentMethod <- as.factor(df$PaymentMethod)
View(df)
test <- glm(Churn ~ . - customerID, data = df, family = binomial)
library(tidyverse)
library(dplyr)
library(caret)
df <- WA_Fn.UseC_.Telco.Customer.Churn
# Create a function to convert "Yes" to 1 and "No" to 0
convert_to_binary <- function(column){
ifelse(column == "Yes", as.numeric(1), as.numeric(0))
}
df$Partner <- convert_to_binary(df$Partner)
df$Dependents <- convert_to_binary(df$Dependents)
df$PhoneService <- convert_to_binary(df$PhoneService)
df$OnlineSecurity <- convert_to_binary(df$OnlineSecurity)
df$OnlineBackup <- convert_to_binary(df$OnlineBackup)
df$DeviceProtection <- convert_to_binary(df$DeviceProtection)
df$TechSupport <- convert_to_binary(df$TechSupport)
df$StreamingTV <- convert_to_binary(df$StreamingTV)
df$StreamingMovies <- convert_to_binary(df$StreamingMovies)
df$PaperlessBilling <- convert_to_binary(df$PaperlessBilling)
df$MultipleLines <- convert_to_binary(df$MultipleLines)
df$Churn <- convert_to_binary(df$Churn)
df$gender = ifelse(df$gender == "Female", 1, 0)
df$InternetService <- as.factor(df$InternetService)
df$Contract <- as.factor(df$Contract)
df$PaymentMethod <- as.factor(df$PaymentMethod)
test <- glm(Churn ~ . - customerID, data = df, family = binomial)
summary(test)
test <- glm(Churn ~ . - customerID - TotalCharges, data = df, family = binomial)
summary(test)
test <- glm(Churn ~ . - customerID - TotalCharges - Partner, data = df, family = binomial)
summary(test)
test <- glm(Churn ~ . - customerID - TotalCharges - Partner - gender, data = df, family = binomial)
summary(test)
test <- glm(Churn ~ . - customerID - TotalCharges - Partner - gender - PhoneService, data = df, family = binomial)
summary(test)
test <- glm(Churn ~ (. - customerID - TotalCharges - Partner - gender - PhoneService)^2, data = df, family = binomial)
summary(test)
test <- glm(Churn ~ (. - customerID)^2, data = df, family = binomial)
summary(test)
test <- glm(Churn ~ TotalCharges, data = df, family = binomial)
summary(test)
trainControl(method = "cv",
number = 10,
verboseIter = TRUE)
library(tidyverse)
library(dplyr)
library(caret)
library(MASS)
# Read data, make sure you set your directory
df <- read.csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
setwd("~/Documents/GitHub/churn_analysis")
library(tidyverse)
library(dplyr)
library(caret)
library(MASS)
# Read data, make sure you set your directory
df <- read.csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
df <- na.omit(df)
# Create a function to convert "Yes" to 1 and "No" to 0
convert_to_binary <- function(column){
ifelse(column == "Yes", as.numeric(1), as.numeric(0))
}
#Convert Yes/No columns to binary
df$Partner <- convert_to_binary(df$Partner)
df$Dependents <- convert_to_binary(df$Dependents)
df$PhoneService <- convert_to_binary(df$PhoneService)
df$OnlineSecurity <- convert_to_binary(df$OnlineSecurity)
df$OnlineBackup <- convert_to_binary(df$OnlineBackup)
df$DeviceProtection <- convert_to_binary(df$DeviceProtection)
df$TechSupport <- convert_to_binary(df$TechSupport)
df$StreamingTV <- convert_to_binary(df$StreamingTV)
df$StreamingMovies <- convert_to_binary(df$StreamingMovies)
df$PaperlessBilling <- convert_to_binary(df$PaperlessBilling)
df$MultipleLines <- convert_to_binary(df$MultipleLines)
df$Churn <- convert_to_binary(df$Churn)
df$gender = ifelse(df$gender == "Female", 1, 0)
df$Churn <- factor(df$Churn)
full_model <- glm(Churn ~ . - customerID + tenure*StreamingMovies, data = df, family = binomial)
#Creates a model with all variables & interactions b/t all variables
full_interaction_model <- glm(Churn ~ (. - customerID)^2, data = df, family = binomial)
#Summaries
summary(full_model)
summary(full_interaction_model)
#Backward Selection
backward_model <- step(full_model, direction = "backward")
#Forward Selection
null_model <- glm(Churn ~ 1, data = df, family = binomial)
forward_model <- stepAIC(null_model, direction = "forward", scope = formula(full_model), trace = FALSE)
#Stepwise Selection
stepwise_model <- step(forward_model, scope=formula(full_model), direction="both")
summary(backward_model)
summary(forward_model)
summary(stepwise_model)
trainControl(method = "cv",
number = 10,
verboseIter = TRUE)
# training the model by assigning sales column
# as target variable and rest other column
# as independent variable
backward_model <- train(Churn ~ SeniorCitizen + Dependents+tenure+ MultipleLines+InternetService+OnlineSecurity+TechSupport+StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + TotalCharges, data = df,
method = "glm",
trControl = train_control)
trainControl(method = "cv",
number = 10,
verboseIter = TRUE)
backward_model <- train(Churn ~ SeniorCitizen + Dependents+tenure+ MultipleLines+InternetService+OnlineSecurity+TechSupport+StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + TotalCharges, data = df,
method = "glm",
trControl = trainControl)
trainControl(method = "cv",
number = 10)
backward_model <- train(Churn ~ SeniorCitizen + Dependents+tenure+ MultipleLines+InternetService+OnlineSecurity+TechSupport+StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + TotalCharges, data = df,
method = "glm",
trControl = trainControl)
print(backward_model)
backward_model <- train(Churn ~ SeniorCitizen + Dependents+tenure+ MultipleLines+InternetService+OnlineSecurity+TechSupport+StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + TotalCharges, data = df,
method = "glm",
trControl = trainControl)
trainControl(method = "cv",
number = 10)
#Backward Selection
backward_model <- step(full_model, direction = "backward")
